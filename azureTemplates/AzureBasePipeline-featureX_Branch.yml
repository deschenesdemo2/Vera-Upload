trigger: 'none'

pool:
  vmImage: 'ubuntu-latest'

stages:
# Build stage is specific for compiling the demo application
# This stage creates an artifact with package/binaries to be uploaded

- stage: 'Build'
  displayName: 'Build the application'

  jobs:
  - job: 'Build'
    displayName: 'Build job'

    steps:

    - task: Maven@3
      inputs:
        mavenPomFile: 'app/pom.xml'
        goals: 'package' # Optional
        options: # Optional
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml' # Required when publishJUnitResults == True
        testRunTitle: # Optional
        codeCoverageToolOption: 'None' # Optional. Options: none, cobertura, jaCoCo. Enabling code coverage inserts the `clean` goal into the Maven goals list when Maven runs.
        codeCoverageClassFilter: # Optional. Comma-separated list of filters to include or exclude classes from collecting code coverage. For example: +:com.*,+:org.*,-:my.app*.*
        codeCoverageClassFilesDirectories: # Optional
        codeCoverageSourceDirectories: # Optional
        codeCoverageFailIfEmpty: false # Optional
        javaHomeOption: 'JDKVersion' # Options: jDKVersion, path
        jdkVersionOption: 'default' # Optional. Options: default, 1.11, 1.10, 1.9, 1.8, 1.7, 1.6
        jdkDirectory: # Required when javaHomeOption == Path
        jdkArchitectureOption: 'x64' # Optional. Options: x86, x64
        mavenVersionOption: 'Default' # Options: default, path
        mavenDirectory: # Required when mavenVersionOption == Path
        mavenSetM2Home: false # Required when mavenVersionOption == Path
        mavenOptions: '-Xmx1024m' # Optional
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
        sqMavenPluginVersionChoice: 'latest' # Required when sonarQubeRunAnalysis == True# Options: latest, pom
        checkStyleRunAnalysis: false # Optional
        pmdRunAnalysis: false # Optional
        findBugsRunAnalysis: false # Optional

    - publish: 'app/target/verademo.war'
      artifact: verademo

# In Veracode Stage it will execute Pipeline Scan or Sandbox Scan or Policy Scan depending on the branch under execution, which could be
# 'featureX' or 'dev' or 'master' respectively.
- stage: Veracode
  dependsOn: Build

  jobs:
  - job: 'SAST - Pipeline Scan'
    displayName: 'SAST Pipeline Scan'

    steps:

    - task: CmdLine@2
      displayName: 'Probando si llegué'
      inputs:
        script: |
          echo '[INFO] Ostias llegué al pipeline de featureX!!!'